vi / vim 是一款文本编辑器，为了方便编写代码，主要需要掌握 移动、选择、删除、复制等常用的操作。主要使用的模式有普通模式、插入模式、选择模式、命令行模式。
1、Normal Mode 普通模式
功能：在这种模式下可以移动光标等。
进入：默认进入 vim 之后，处于这种模式。在其他模式下按ESC后进入此模式。

2、Visual Mode 可视模式
功能：在这种模式下可以选定一些字符、行、多列。
进入：在普通模式下，按 v 进入可视模式，按 V 进入可视行模式，按 ctrl + v 进入可视块模式。

3、Insert Mode 插入模式
功能：在这种模式下可以编辑输入等。
进入：普通模式下，可以按i、a、o、s 等进入。

4、Command-Line 命令行模式
功能：可以输入各种命令。
进入：普通模式下按冒号 (:) 进入。

5、Ex Mode Ex模式
功能：多行的 Command-Line 模式。
进入：普通模式下按 Q 进入 Ex 模式。

6、Select Mode 选择模式
功能：在vim下常用的模式，用鼠标拖选区域的时候，就进入了选择模式。
和可视模式不同的是，在这个模式下，选择完了高亮区域后，敲任何按键就直接输入并替换选择的文本了。
进入：普通模式下，可以按 gh 进入。


基本操作
打开文件：
vi -t main 	存在 ctags 文件时，可以直接打开 main 函数所在文件中定义的位置
vi filename +78	直接打开时，光标跳转到 78 行行首
vi filename +	打开时光标处于最后一行
vi -r filename	在上次正用 vi 编辑时发生意外退出，恢复


普通模式：
ctrl + g 	显示当前文件名，和光标所在的百分比位置
=		格式化代码
gg=G		格式化所有代码


移动和选择
space 		将光标向后移动一个字符
enter		将光标移到下一行的第一个字符处
-		光标跳转到上一行的第一个字符处
+		光标跳转到下一行的第一个自付处
gg 		光标跳转到文件开始处
G		光标跳转到文件结束处
number+gg	光标跳转到 number 行
number+G	同上，光标跳转到 number 行
:number		同上，光标跳转到 number 行
gD		跳转到局部变量的定义处

''		跳转到光标上次所在的位置
~~		跳转到光标上次所在的位置，功能同上	
m+(a-Z)		给某个位置做标记
'+(a-Z)		跳转到标记的位置



h		左
j		下
k		上
l		右 
w       移动光标到下一个单词开头	word
e        如果光标不在当前所在的单词的末尾，将光标移动到当前单词的末尾，如果光标在当前单词的末尾，将光标移动到下一个单词的末尾
b       移动光标到上一个单词		back
0               	移动光标到本行最开头
^(shift + 6)	移动光标到本行最开头的字符处
$(shift + 4)   	移动光标到本行结尾处

H               移动光标到屏幕的首行	head
M              移动光标到屏幕的中间一行  	middle
L                移动光标到屏幕的尾行 	low

 
ctrl + f         向下翻页 同 page down   	forword
ctrl + b        向上翻页 同 page up	back
ctrl + d        向下翻半页 此比较有用 	down
ctrl + u        向上翻半页 此比较有用	up
ctrl + e        向下翻一行	
ctrl + y        向上一行


%	 跳转到匹配的括号处 大括号和小括号都可以
 {               转到上一个空行
 }               转到下一个空行
 [              转到上一个位于第一列的“{”
 ]             转到下一个位于第一列的“}”


插入
i		在光标所在的字符前开始插入 insert
I		在光标所在的行首开始插入，如果行首有空格则在空格之后插入 insert
a		在光标所在的字符后开始插入 add
A		在光标所在的行尾开始插入 add	
o		在光标所在的行的下面另起一行插入 online
O		在光标所在的行的上面另起一行插入 online
s		删除光标所在的字符并开始插入 
S		删除光标所在的行并开始插入


编辑操作：复制删除和粘贴，删除本质上就是剪贴
u		撤销，可以一直撤销到打开文件时的状态 undo
ctrl + r		恢复撤销的命令 redo

x		删除光标所在的字符，或者选中的文字 cut
d + 移动命令	删除当前光标至移动命令之间对应的内容 delete
		eg：
			dw 删除光标当前位置到词尾
			d0 删除光标到一行的起始位置
			d} 删除光标到段结尾
			d代码行G 从光标所在的位置删除到指定代码行之间的所有字符，包括那一行
			d'a 删除光标至标记 a 之间的所有字符 
dd		删除一行，就是剪切
D		删除至行尾
nx		执行 n 次 x 命令，删除当前光标后面的 n 个字符
ndd		执行 n 次 dd 命令，删除光标所在行至后面的 n 行

y + 移动命令	复制当前光标至移动命令之间的所有内容
yy		复制当前光标所在的行	
nyy		执行 n 次 yy 命令，复制光标所在行至后面的 n 行

p		粘贴，将粘贴板中的内容粘贴到光标所再的位置

r		替换当前字符，只能替换一个字符然后就会自己退出替换模式 replace
R		替换当前行光标后的字符，进入替换模式，可以一次替换光标后面的字符 replace

普通模式下 缩拍
>> 		向右缩进 可视行模式下只需要一个 >
<<		向左缩进 可视行模式下只需要一个 <
.		重复上次执行的命令

查找命令
:/str	查找字符串的位置，查到后按 n 查找字符串下一个出现的位置，N查找字符串所在的上一个位置 从文件结尾处开始搜索
:?str	查找字符串的位置，查到后按 n 查找字符串下一个出现的位置，N查找字符串所在的上一个位置 从文件开头处开始搜索
	使用 vim 搜索字符串时会导致所查找的字符串高亮，可以在命令行下 :noh :nohlsearch :set nohlsearch :set noh 都可以，意思为（no highlight search 缩写）
#	向上查找当前光标所在的单词
*	向下查找当前光标所在的单词
n	跳转到查找的下一个结果 注意：使用 # 查找时，按下 n 会向文件前面跳转
N	跳转到查找的上一个结果

替换命令
:%s/str1/str2/g	全局替换 将 str1 全部替换为 str2 
:%s/str1/str2/g	先远中要替换文字的范围，将选中范围内的 str1 全部替换为 str2
:%s/str1/str2/gc	替换字符的时候，会有提示，推荐使用
	y	替换 yes
	n	不替换 no
	a	替换全部 all
 	l	last 最后一个，并把光标移动到行首
	^E	向下滚屏
	^Y	向上滚屏
	q	退出替换 quit





.filename.swp 解决方法
vi -r filename
vi filename 
	r 还原上次退出时的文件编辑状态
	d 删除对应的 .filename.swp

eg：
编辑命令和数字连用
输入 N 个相同的字符
1. 输入 10，表示要重复 10 次
2. 输入 i 进入编辑模式
3. 输入 * 也就是要重复的文字
4. 按下 ESC 也就是返回到普通模式，返回后 vi 就会把 2，3 步骤在执行 9 次，算上第一次，总共是 10 次

	
利用可视块给多行代码增加注释
1. 移动到要添加注释的第一行代码，按 ^ 来到行首
2. 按 CTRL + v 进入可是款 模式
3. 使用 j 向下连续远中要添加的代码
4. 输入 I 进入编辑模式，注意：一定要使用 I
5. 在行首插入注释符号 //
6. 按下 ESC 也就是返回到普通模式，返回之后 vi 会在之前远中的每一行代码前插入 //


删除多行注释
1. 移动到要添加注释的第一行代码，按 ^ 来到行首
2. 按 CTRL + v 进入可是款 模式
3. 使用 j 向下连续远中，使用 l 向右选中要删除的地方
5. 按下 x 或者 d 删除



自动补全 快捷命令 + table键
cc	/* */
ff      	头文件
dd      	预处理
is	头文件包含
if 	if 判断
while 	whlie 循环
main    	主函数
